// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/bonus/repo.go
//
// Generated by this command:
//
//	mockgen --source ./internal/bonus/repo.go
//
// Package mock_bonus is a generated GoMock package.
package mock_bonus

import (
	context "context"
	reflect "reflect"

	bonus "github.com/VolodyaLarin/rsoi-lab-02/internal/bonus"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIBonusRepo is a mock of IBonusRepo interface.
type MockIBonusRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIBonusRepoMockRecorder
}

// MockIBonusRepoMockRecorder is the mock recorder for MockIBonusRepo.
type MockIBonusRepoMockRecorder struct {
	mock *MockIBonusRepo
}

// NewMockIBonusRepo creates a new mock instance.
func NewMockIBonusRepo(ctrl *gomock.Controller) *MockIBonusRepo {
	mock := &MockIBonusRepo{ctrl: ctrl}
	mock.recorder = &MockIBonusRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBonusRepo) EXPECT() *MockIBonusRepoMockRecorder {
	return m.recorder
}

// CreateBonusOperation mocks base method.
func (m *MockIBonusRepo) CreateBonusOperation(ctx context.Context, username string, dto bonus.BonusHistoryDto) (error, *bonus.BonusHistoryDto, *bonus.BonusDto) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBonusOperation", ctx, username, dto)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(*bonus.BonusHistoryDto)
	ret2, _ := ret[2].(*bonus.BonusDto)
	return ret0, ret1, ret2
}

// CreateBonusOperation indicates an expected call of CreateBonusOperation.
func (mr *MockIBonusRepoMockRecorder) CreateBonusOperation(ctx, username, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBonusOperation", reflect.TypeOf((*MockIBonusRepo)(nil).CreateBonusOperation), ctx, username, dto)
}

// DeleteBonusOperationByFlightUid mocks base method.
func (m *MockIBonusRepo) DeleteBonusOperationByFlightUid(ctx context.Context, username string, ticketUuid uuid.UUID) (error, *bonus.BonusHistoryDto) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBonusOperationByFlightUid", ctx, username, ticketUuid)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(*bonus.BonusHistoryDto)
	return ret0, ret1
}

// DeleteBonusOperationByFlightUid indicates an expected call of DeleteBonusOperationByFlightUid.
func (mr *MockIBonusRepoMockRecorder) DeleteBonusOperationByFlightUid(ctx, username, ticketUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBonusOperationByFlightUid", reflect.TypeOf((*MockIBonusRepo)(nil).DeleteBonusOperationByFlightUid), ctx, username, ticketUuid)
}

// GetBonusDetails mocks base method.
func (m *MockIBonusRepo) GetBonusDetails(ctx context.Context, username string) (error, *bonus.BonusDto) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBonusDetails", ctx, username)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(*bonus.BonusDto)
	return ret0, ret1
}

// GetBonusDetails indicates an expected call of GetBonusDetails.
func (mr *MockIBonusRepoMockRecorder) GetBonusDetails(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBonusDetails", reflect.TypeOf((*MockIBonusRepo)(nil).GetBonusDetails), ctx, username)
}
